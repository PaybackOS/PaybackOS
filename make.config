# Define the compiler and flags
CXX = i686-elf-g++  # Add C++ compiler
CC = i686-elf-gcc    # Add C compiler
AS = i686-elf-as
LD = i686-elf-gcc
SHARED_FLAGS = -g -mpreferred-stack-boundary=2 -mgeneral-regs-only -fno-pic -ffreestanding -O2 -Wall -Wextra 
SHARED_CXX_FLAGS = $(SHARED_FLAGS) -std=gnu++17  -fno-rtti -fno-exceptions -fno-use-cxa-atexit
SHARED_C_FLAGS = $(SHARED_FLAGS) -std=gnu99
CXXFLAGS = $(SHARED_CXX_FLAGS) -Isrc/headers/
CFLAGS = $(SHARED_C_FLAGS) -Isrc/headers/ # Add C flags for the C compiler
USERCXXFLAGS = $(SHARED_CXX_FLAGS) -Iuserspace/headers/
USERCFLAGS = $(SHARED_C_FLAGS) -Iuserspace/headers/
ASFLAGS = -g
LDFLAGS = -no-pie -nostdlib -lgcc -z noexecstack

# Find all source files in src/ and its subdirectories
SRCS_S = $(shell find src/ -name '*.s')
SRCS_ASM = $(shell find src/ -name '*.asm')
SRCS_CPP = $(shell find src/ -name '*.cpp')  # Find C++ source files
SRCS_C = $(shell find src/ -name '*.c')      # Find C source files

# Find all object files in src/ and its subdirectories
OBJ_S = $(SRCS_S:src/%.s=obj/%.o)
OBJ_ASM = $(SRCS_ASM:src/%.asm=obj/%.o)
OBJ_CPP = $(SRCS_CPP:src/%.cpp=obj/%.o)  # Define object files for C++
OBJ_C = $(SRCS_C:src/%.c=obj/%.o)        # Define object files for C
OBJ = $(OBJ_S) $(OBJ_ASM) $(OBJ_CPP) $(OBJ_C)  # Include all objects

# Define the kernel binary
TARGET = PaybackOS.bin

# Define the build target
ALL: build iso
